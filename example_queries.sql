-- ================================================================
-- Example SQL Queries for PDF Processing Application
-- ================================================================
-- This file contains sample queries to analyze and explore
-- the data generated by the PDF processing application
-- ================================================================

-- Set context
USE DATABASE PDF_ANALYTICS_DB;
USE SCHEMA PDF_PROCESSING;

-- ================================================================
-- SECTION 1: TEXT DATA QUERIES
-- ================================================================

-- Query 1.1: View all extracted text
SELECT 
    FILE_NAME,
    PAGE_NUMBER,
    EXTRACTED_TEXT,
    UPLOAD_TIMESTAMP
FROM PDF_TEXT_DATA
ORDER BY UPLOAD_TIMESTAMP DESC, PAGE_NUMBER ASC;

-- Query 1.2: Count pages per PDF file
SELECT 
    FILE_NAME,
    COUNT(*) AS PAGE_COUNT,
    MIN(UPLOAD_TIMESTAMP) AS FIRST_UPLOAD,
    MAX(UPLOAD_TIMESTAMP) AS LAST_UPLOAD
FROM PDF_TEXT_DATA
GROUP BY FILE_NAME
ORDER BY FIRST_UPLOAD DESC;

-- Query 1.3: Search text for specific keywords
SELECT 
    FILE_NAME,
    PAGE_NUMBER,
    EXTRACTED_TEXT,
    UPLOAD_TIMESTAMP
FROM PDF_TEXT_DATA
WHERE LOWER(EXTRACTED_TEXT) LIKE '%keyword%'  -- Replace with your keyword
ORDER BY UPLOAD_TIMESTAMP DESC;

-- Query 1.4: Get text from specific file
SELECT 
    PAGE_NUMBER,
    EXTRACTED_TEXT
FROM PDF_TEXT_DATA
WHERE FILE_NAME = 'your_file.pdf'  -- Replace with your file name
ORDER BY PAGE_NUMBER;

-- Query 1.5: Most recently processed PDFs
SELECT 
    FILE_NAME,
    COUNT(*) AS PAGES,
    MAX(UPLOAD_TIMESTAMP) AS PROCESSED_TIME
FROM PDF_TEXT_DATA
GROUP BY FILE_NAME
ORDER BY PROCESSED_TIME DESC
LIMIT 10;

-- ================================================================
-- SECTION 2: IMAGE ANALYSIS QUERIES
-- ================================================================

-- Query 2.1: View all image analysis results
SELECT 
    FILE_NAME,
    IMAGE_NAME,
    MODEL_NAME,
    PAGE_NUMBER,
    FOR_SALE_SIGN_DETECTED,
    FOR_SALE_SIGN_CONFIDENCE,
    SOLAR_PANEL_DETECTED,
    SOLAR_PANEL_CONFIDENCE,
    HUMAN_PRESENCE_DETECTED,
    HUMAN_PRESENCE_CONFIDENCE,
    POTENTIAL_DAMAGE_DETECTED,
    POTENTIAL_DAMAGE_CONFIDENCE,
    DAMAGE_DESCRIPTION,
    ANALYSIS_TIMESTAMP
FROM IMAGE_ANALYSIS_RESULTS
ORDER BY ANALYSIS_TIMESTAMP DESC;

-- Query 2.2: Properties with "For Sale" signs
SELECT 
    FILE_NAME,
    IMAGE_NAME,
    MODEL_NAME,
    FOR_SALE_SIGN_CONFIDENCE,
    ANALYSIS_TIMESTAMP
FROM IMAGE_ANALYSIS_RESULTS
WHERE FOR_SALE_SIGN_DETECTED = TRUE
ORDER BY FOR_SALE_SIGN_CONFIDENCE DESC;

-- Query 2.3: Properties with solar panels
SELECT 
    FILE_NAME,
    IMAGE_NAME,
    MODEL_NAME,
    SOLAR_PANEL_CONFIDENCE,
    ANALYSIS_TIMESTAMP
FROM IMAGE_ANALYSIS_RESULTS
WHERE SOLAR_PANEL_DETECTED = TRUE
ORDER BY SOLAR_PANEL_CONFIDENCE DESC;

-- Query 2.4: Properties with human presence
SELECT 
    FILE_NAME,
    IMAGE_NAME,
    MODEL_NAME,
    HUMAN_PRESENCE_CONFIDENCE,
    ANALYSIS_TIMESTAMP
FROM IMAGE_ANALYSIS_RESULTS
WHERE HUMAN_PRESENCE_DETECTED = TRUE
ORDER BY HUMAN_PRESENCE_CONFIDENCE DESC;

-- Query 2.5: Properties with potential damage
SELECT 
    FILE_NAME,
    IMAGE_NAME,
    MODEL_NAME,
    POTENTIAL_DAMAGE_CONFIDENCE,
    DAMAGE_DESCRIPTION,
    ANALYSIS_TIMESTAMP
FROM IMAGE_ANALYSIS_RESULTS
WHERE POTENTIAL_DAMAGE_DETECTED = TRUE
ORDER BY POTENTIAL_DAMAGE_CONFIDENCE DESC;

-- ================================================================
-- SECTION 3: SUMMARY AND STATISTICS
-- ================================================================

-- Query 3.1: Overall detection summary
SELECT 
    COUNT(DISTINCT FILE_NAME) AS TOTAL_FILES,
    COUNT(DISTINCT IMAGE_NAME) AS TOTAL_IMAGES,
    SUM(CASE WHEN FOR_SALE_SIGN_DETECTED THEN 1 ELSE 0 END) AS FOR_SALE_COUNT,
    SUM(CASE WHEN SOLAR_PANEL_DETECTED THEN 1 ELSE 0 END) AS SOLAR_PANEL_COUNT,
    SUM(CASE WHEN HUMAN_PRESENCE_DETECTED THEN 1 ELSE 0 END) AS HUMAN_PRESENCE_COUNT,
    SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) AS DAMAGE_COUNT
FROM IMAGE_ANALYSIS_RESULTS;

-- Query 3.2: Detection rates by model
SELECT 
    MODEL_NAME,
    COUNT(*) AS TOTAL_ANALYSES,
    SUM(CASE WHEN FOR_SALE_SIGN_DETECTED THEN 1 ELSE 0 END) AS FOR_SALE_COUNT,
    SUM(CASE WHEN SOLAR_PANEL_DETECTED THEN 1 ELSE 0 END) AS SOLAR_COUNT,
    SUM(CASE WHEN HUMAN_PRESENCE_DETECTED THEN 1 ELSE 0 END) AS HUMAN_COUNT,
    SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) AS DAMAGE_COUNT,
    ROUND(AVG(FOR_SALE_SIGN_CONFIDENCE), 2) AS AVG_FOR_SALE_CONF,
    ROUND(AVG(SOLAR_PANEL_CONFIDENCE), 2) AS AVG_SOLAR_CONF,
    ROUND(AVG(HUMAN_PRESENCE_CONFIDENCE), 2) AS AVG_HUMAN_CONF,
    ROUND(AVG(POTENTIAL_DAMAGE_CONFIDENCE), 2) AS AVG_DAMAGE_CONF
FROM IMAGE_ANALYSIS_RESULTS
GROUP BY MODEL_NAME
ORDER BY TOTAL_ANALYSES DESC;

-- Query 3.3: Properties by detection count
SELECT 
    FILE_NAME,
    COUNT(*) AS TOTAL_IMAGES,
    SUM(CASE WHEN FOR_SALE_SIGN_DETECTED THEN 1 ELSE 0 END) AS FOR_SALE_SIGNS,
    SUM(CASE WHEN SOLAR_PANEL_DETECTED THEN 1 ELSE 0 END) AS SOLAR_PANELS,
    SUM(CASE WHEN HUMAN_PRESENCE_DETECTED THEN 1 ELSE 0 END) AS HUMAN_PRESENCE,
    SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) AS DAMAGE_DETECTED
FROM IMAGE_ANALYSIS_RESULTS
GROUP BY FILE_NAME
ORDER BY DAMAGE_DETECTED DESC, FILE_NAME;

-- Query 3.4: Average confidence scores per file
SELECT 
    FILE_NAME,
    COUNT(*) AS IMAGE_COUNT,
    ROUND(AVG(FOR_SALE_SIGN_CONFIDENCE), 2) AS AVG_FOR_SALE_CONFIDENCE,
    ROUND(AVG(SOLAR_PANEL_CONFIDENCE), 2) AS AVG_SOLAR_CONFIDENCE,
    ROUND(AVG(HUMAN_PRESENCE_CONFIDENCE), 2) AS AVG_HUMAN_CONFIDENCE,
    ROUND(AVG(POTENTIAL_DAMAGE_CONFIDENCE), 2) AS AVG_DAMAGE_CONFIDENCE
FROM IMAGE_ANALYSIS_RESULTS
GROUP BY FILE_NAME
ORDER BY FILE_NAME;

-- Query 3.5: Processing timeline
SELECT 
    DATE(ANALYSIS_TIMESTAMP) AS ANALYSIS_DATE,
    COUNT(*) AS IMAGES_ANALYZED,
    COUNT(DISTINCT FILE_NAME) AS FILES_PROCESSED,
    SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) AS DAMAGE_FOUND
FROM IMAGE_ANALYSIS_RESULTS
GROUP BY DATE(ANALYSIS_TIMESTAMP)
ORDER BY ANALYSIS_DATE DESC;

-- ================================================================
-- SECTION 4: ADVANCED ANALYSIS
-- ================================================================

-- Query 4.1: Properties with multiple issues
SELECT 
    FILE_NAME,
    IMAGE_NAME,
    FOR_SALE_SIGN_DETECTED,
    SOLAR_PANEL_DETECTED,
    HUMAN_PRESENCE_DETECTED,
    POTENTIAL_DAMAGE_DETECTED,
    (CASE WHEN FOR_SALE_SIGN_DETECTED THEN 1 ELSE 0 END +
     CASE WHEN SOLAR_PANEL_DETECTED THEN 1 ELSE 0 END +
     CASE WHEN HUMAN_PRESENCE_DETECTED THEN 1 ELSE 0 END +
     CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) AS TOTAL_DETECTIONS
FROM IMAGE_ANALYSIS_RESULTS
WHERE (CASE WHEN FOR_SALE_SIGN_DETECTED THEN 1 ELSE 0 END +
       CASE WHEN SOLAR_PANEL_DETECTED THEN 1 ELSE 0 END +
       CASE WHEN HUMAN_PRESENCE_DETECTED THEN 1 ELSE 0 END +
       CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) >= 2
ORDER BY TOTAL_DETECTIONS DESC;

-- Query 4.2: High confidence damage detections
SELECT 
    FILE_NAME,
    IMAGE_NAME,
    PAGE_NUMBER,
    POTENTIAL_DAMAGE_CONFIDENCE,
    DAMAGE_DESCRIPTION,
    MODEL_NAME,
    ANALYSIS_TIMESTAMP
FROM IMAGE_ANALYSIS_RESULTS
WHERE POTENTIAL_DAMAGE_DETECTED = TRUE
  AND POTENTIAL_DAMAGE_CONFIDENCE >= 70
ORDER BY POTENTIAL_DAMAGE_CONFIDENCE DESC;

-- Query 4.3: Properties suitable for solar (no existing panels, no visible damage)
SELECT DISTINCT
    FILE_NAME,
    COUNT(DISTINCT IMAGE_NAME) AS IMAGE_COUNT
FROM IMAGE_ANALYSIS_RESULTS
WHERE SOLAR_PANEL_DETECTED = FALSE
  AND POTENTIAL_DAMAGE_DETECTED = FALSE
GROUP BY FILE_NAME
ORDER BY IMAGE_COUNT DESC;

-- Query 4.4: Compare model performance on same images
WITH ModelComparison AS (
    SELECT 
        IMAGE_NAME,
        MAX(CASE WHEN MODEL_NAME = 'claude-3-5-sonnet' THEN FOR_SALE_SIGN_DETECTED ELSE NULL END) AS CLAUDE_FOR_SALE,
        MAX(CASE WHEN MODEL_NAME = 'gpt-4o' THEN FOR_SALE_SIGN_DETECTED ELSE NULL END) AS GPT_FOR_SALE,
        MAX(CASE WHEN MODEL_NAME = 'pixtral-large' THEN FOR_SALE_SIGN_DETECTED ELSE NULL END) AS PIXTRAL_FOR_SALE,
        MAX(CASE WHEN MODEL_NAME = 'claude-3-5-sonnet' THEN POTENTIAL_DAMAGE_DETECTED ELSE NULL END) AS CLAUDE_DAMAGE,
        MAX(CASE WHEN MODEL_NAME = 'gpt-4o' THEN POTENTIAL_DAMAGE_DETECTED ELSE NULL END) AS GPT_DAMAGE,
        MAX(CASE WHEN MODEL_NAME = 'pixtral-large' THEN POTENTIAL_DAMAGE_DETECTED ELSE NULL END) AS PIXTRAL_DAMAGE
    FROM IMAGE_ANALYSIS_RESULTS
    GROUP BY IMAGE_NAME
)
SELECT *
FROM ModelComparison
WHERE (CLAUDE_FOR_SALE IS NOT NULL AND GPT_FOR_SALE IS NOT NULL)
   OR (CLAUDE_DAMAGE IS NOT NULL AND GPT_DAMAGE IS NOT NULL);

-- Query 4.5: Property risk assessment (combining multiple factors)
SELECT 
    FILE_NAME,
    COUNT(DISTINCT IMAGE_NAME) AS TOTAL_IMAGES,
    SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) AS DAMAGE_COUNT,
    ROUND(AVG(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN POTENTIAL_DAMAGE_CONFIDENCE ELSE 0 END), 2) AS AVG_DAMAGE_CONFIDENCE,
    SUM(CASE WHEN HUMAN_PRESENCE_DETECTED THEN 1 ELSE 0 END) AS OCCUPANCY_INDICATORS,
    CASE 
        WHEN SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) = 0 THEN 'LOW'
        WHEN SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) <= 2 THEN 'MEDIUM'
        ELSE 'HIGH'
    END AS RISK_LEVEL
FROM IMAGE_ANALYSIS_RESULTS
GROUP BY FILE_NAME
ORDER BY DAMAGE_COUNT DESC, AVG_DAMAGE_CONFIDENCE DESC;

-- ================================================================
-- SECTION 5: STAGE MANAGEMENT
-- ================================================================

-- Query 5.1: List all images in stage
LIST @PDF_IMAGES_STAGE;

-- Query 5.2: Count images in stage by type
SELECT 
    REGEXP_SUBSTR(NAME, '\\.[^\\.]+$') AS FILE_EXTENSION,
    COUNT(*) AS FILE_COUNT,
    SUM(SIZE) AS TOTAL_SIZE_BYTES,
    ROUND(SUM(SIZE) / 1024 / 1024, 2) AS TOTAL_SIZE_MB
FROM (
    SELECT * FROM DIRECTORY(@PDF_IMAGES_STAGE)
)
GROUP BY FILE_EXTENSION
ORDER BY FILE_COUNT DESC;

-- Query 5.3: List PDFs in stage
LIST @PDF_FILES_STAGE;

-- ================================================================
-- SECTION 6: DATA CLEANUP (USE WITH CAUTION)
-- ================================================================

-- Query 6.1: Delete analysis results older than 30 days
-- UNCOMMENT TO USE:
-- DELETE FROM IMAGE_ANALYSIS_RESULTS
-- WHERE ANALYSIS_TIMESTAMP < DATEADD(DAY, -30, CURRENT_TIMESTAMP());

-- Query 6.2: Delete text data for specific file
-- UNCOMMENT TO USE:
-- DELETE FROM PDF_TEXT_DATA
-- WHERE FILE_NAME = 'your_file.pdf';

-- Query 6.3: Clear all data (complete reset)
-- UNCOMMENT TO USE:
-- TRUNCATE TABLE PDF_TEXT_DATA;
-- TRUNCATE TABLE IMAGE_ANALYSIS_RESULTS;
-- REMOVE @PDF_IMAGES_STAGE;
-- REMOVE @PDF_FILES_STAGE;

-- ================================================================
-- SECTION 7: EXPORT QUERIES
-- ================================================================

-- Query 7.1: Export full analysis report
SELECT 
    iar.FILE_NAME,
    iar.IMAGE_NAME,
    iar.PAGE_NUMBER,
    iar.MODEL_NAME,
    iar.FOR_SALE_SIGN_DETECTED,
    iar.FOR_SALE_SIGN_CONFIDENCE,
    iar.SOLAR_PANEL_DETECTED,
    iar.SOLAR_PANEL_CONFIDENCE,
    iar.HUMAN_PRESENCE_DETECTED,
    iar.HUMAN_PRESENCE_CONFIDENCE,
    iar.POTENTIAL_DAMAGE_DETECTED,
    iar.POTENTIAL_DAMAGE_CONFIDENCE,
    iar.DAMAGE_DESCRIPTION,
    iar.ANALYSIS_TIMESTAMP,
    ptd.EXTRACTED_TEXT AS PAGE_TEXT
FROM IMAGE_ANALYSIS_RESULTS iar
LEFT JOIN PDF_TEXT_DATA ptd 
    ON iar.FILE_NAME = ptd.FILE_NAME 
    AND iar.PAGE_NUMBER = ptd.PAGE_NUMBER
ORDER BY iar.ANALYSIS_TIMESTAMP DESC;

-- Query 7.2: Export property summary
SELECT 
    FILE_NAME AS PROPERTY_NAME,
    COUNT(DISTINCT IMAGE_NAME) AS TOTAL_IMAGES,
    MAX(ANALYSIS_TIMESTAMP) AS LAST_ANALYZED,
    SUM(CASE WHEN FOR_SALE_SIGN_DETECTED THEN 1 ELSE 0 END) AS FOR_SALE_SIGNS_FOUND,
    SUM(CASE WHEN SOLAR_PANEL_DETECTED THEN 1 ELSE 0 END) AS SOLAR_PANELS_FOUND,
    SUM(CASE WHEN HUMAN_PRESENCE_DETECTED THEN 1 ELSE 0 END) AS HUMAN_PRESENCE_FOUND,
    SUM(CASE WHEN POTENTIAL_DAMAGE_DETECTED THEN 1 ELSE 0 END) AS DAMAGE_ISSUES_FOUND,
    LISTAGG(DISTINCT DAMAGE_DESCRIPTION, '; ') WITHIN GROUP (ORDER BY DAMAGE_DESCRIPTION) AS ALL_DAMAGE_DESCRIPTIONS
FROM IMAGE_ANALYSIS_RESULTS
GROUP BY FILE_NAME
ORDER BY LAST_ANALYZED DESC;

-- ================================================================
-- END OF EXAMPLE QUERIES
-- ================================================================

-- Need help? Check SETUP_GUIDE.md or README.md
-- For more information: https://docs.snowflake.com/

